from torch.utils.data import Dataset, DataLoader
import os
import pickle

import torch

from datasets.utils import *
from edflow.data.util import adjust_support


class COCODataset(Dataset):
    def __init__(self, index_file, spatial_size, phase="train"):
        super(COCODataset, self).__init__()
        self.index_file = index_file
        self.dataset_root = os.path.dirname(index_file)
        self.spatial_size = spatial_size
        self.phase = phase

        with open(index_file, "rb") as f:
            self.index = pickle.load(f)
        self.joints_order = self.index["joint_order"]  # 从0-17,各关节点名称顺序

        self.samples = self._dataset_init(phase=self.phase)

    def _dataset_init(self, phase='train'):
        samples = []

        # 必须要有的关节点 及 索引
        # required_points = ["lshoulder", "rshoulder", "lhip", "rhip"]
        required_points = self.joints_order
        required_points_indices = [self.joints_order.index(point) for point in required_points]

        is_train = (phase == 'train')
        for i in range(len(self.index["imgs"])):
            good = True
            good = good and (self.index["train"][i] == is_train)
            joints = self.index["joints"][i]

            joints_required = np.float32(joints[required_points_indices])
            good = good and valid_joints(joints_required)
            if good:
                samples.append({"joints": joints, "img_path": self.index["imgs"][i]})  # 相对于data_root的相对路径

        return samples

    def __len__(self):
        return len(self.samples)

    def __getitem__(self, idx):
        """
        return a dictionary with contents as follows:
        data = {
            "keyponits_coordinates": 18 keypoints of a person (open pose 18 format),
            "im": target image with range [-1,1],
            "stickman": a stickman image generated by keyponits_coordinates, with range [-1,1],
            "im_norm": img crops after in-plane normalization, with range [-1,1],
            "stickman_norm": stickman crops after in-plane normalization, with range [-1,1],
        }
        :param idx: item index in total datasets
        :return:
        """
        data = {}

        # 图片对应的关键点坐标 18个
        data["keyponits_coordinates"] = torch.from_numpy(
            (self.samples[idx]['joints'] * self.spatial_size).astype(np.float32)
        )

        # 图片
        img_absolute_path = os.path.join(self.dataset_root, self.samples[idx]["img_path"])
        im = adjust_support(cv2.imread(img_absolute_path), "-1->1", "0->255")
        data["im"] = torch.from_numpy(np.transpose(im, axes=[2, 0, 1]).astype(np.float32))

        # keypoints to stickman
        stickman = adjust_support(cv2_keypoints2stickman(data["keyponits_coordinates"], self.spatial_size),
                                  "-1->1",
                                  "0->255")
        data["stickman"] = torch.from_numpy(np.transpose(stickman, axes=[2, 0, 1]).astype(np.float32))

        im_norm, stickman_norm = normalize(im, data["keyponits_coordinates"], stickman, self.joints_order, 2)
        data["im_norm"] = torch.from_numpy(np.transpose(im_norm, axes=[2, 0, 1]).astype(np.float32))
        data["stickman_norm"] = torch.from_numpy(np.transpose(stickman_norm, axes=[2, 0, 1]).astype(np.float32))
        return data


if __name__ == '__main__':

    ds = COCODataset(index_file='/home/liuzhian/hdd/datasets/deepfashion/index.p',
                     spatial_size=256)
    dataloader = DataLoader(ds, batch_size=1,
                            shuffle=False, num_workers=0)

    for data in dataloader:
        im = np.transpose(data["im"][0].numpy(), axes=(1, 2, 0))
        stickman = np.transpose(data["stickman"][0].numpy(), axes=(1, 2, 0))

        cv2.imshow('im', postprocess(im))
        cv2.imshow('stickman', postprocess(stickman))
        cv2.waitKey(0)
